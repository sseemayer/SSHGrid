#!/bin/bash

# worker script for SSHGrid

queuefile=sshgrid.commands.sh
lockfile=sshgrid.commands.lock
idfile=sshgrid.host_ids

barrier_base=sshgrid.barrier
barrier_sleeptime=5

self="${BASH_SOURCE[0]}";
if ([ -h "${self}" ]) then
	  while([ -h "${self}" ]) do self=`readlink "${self}"`; done
fi
pushd . > /dev/null
cd `dirname ${self}` > /dev/null
self=`pwd`;
popd  > /dev/null

function log {
	timestamp=`echo -e "\`date\` ($hostnumber/$hostcount)\t"`
	echo "${timestamp}$*"
}

function get_next_task {
	ssh $master "bash -c \"(cd $self; $worker_name remote_getwork )\"" #2>/dev/null
}

function execute_task {

	task=$*

	log "Executing '$task'"

	process_task
	bash -c "$task" || log "WARNING: Failed with exit code $?"
}

function process_task {
	task=$( echo $task | sed -e "s/\$hostnumber/$hostnumber/g" )
}

function host_id {
	echo -e "`hostname`\t$$\t$hostnumber"
}

function barrier_wait {

	log "Encountered barrier number $barrier_number"

	barrier_enter
	
	while [[ $waiting == "wait" ]]; do
		sleep $barrier_sleeptime
		barrier_waiting
	done

	log "Passed barrier number $barrier_number"

	barrier_number=$(( $barrier_number + 1 ))
}

function barrier_enter {
	hostid=$(host_id)
	waiting=$( ssh $master "bash -c \"(cd $self; $worker_name remote_barrier_enter $barrier_number $hostid $hostcount\"" 2>/dev/null )

	log "Entering barrier number $barrier_number: $waiting"
}

function barrier_waiting {
	hostid=$(host_id)
	waiting=$( ssh $master "bash -c \"(cd $self; $worker_name remote_barrier_waiting $barrier_number $hostid $hostcount\"" 2>/dev/null)
}

function worker_run {

	worker_name=$1
	master=$3
	hostnumber=$4
	hostcount=$5

	barrier_number=1


	(
		flock 200
		host_id >> $idfile
	) 200>$idfile.lock

	log "Started worker on `hostname`, PID $$"
	log "\$worker_name is $worker_name"
	log "\$master is $master"
	log "\$self is $self"

	next_task=$(get_next_task)
	while [[ $next_task != "" ]]; do

		# determine what line we encountered
		if [[ ${next_task:0:1} != "#" ]]; then
			# task line, just execute the task
			execute_task $next_task

		elif [[ ${next_task:0:3} == "#%B" ]]; then
			# barrier, wait for other workers
			barrier_wait
		fi

		next_task=$(get_next_task)
	done

	log "Finished."

}

function worker_remote_getwork {


	(
		flock 100

		# get first non-comment line (this can be a barrier, too)
		task=$(sed -nre '/^[^#]|(#%B)/{p;q}' $queuefile)

		# comment out first non-comment line
		[[ ${task:0:3} == "#%B" ]] || sed -i -re '0,/(^[^#])|(^#%B)/s//#&/' $queuefile

		echo $task
	) 100>$lockfile

}

function get_pid_status {
	hn=$1
	pr=$2
	
	ssh $hn "bash -c 'if [ -d /proc/$pr ]; then echo run; else echo term; fi'" || echo "unknown"
}

function get_log {
	n=$1
	tail -n1 host-$n.log
}

function worker_status {
	
	echo -e "#worker_number\thostname\tpid\tstatus\tlast_log";

	while read -u 100 l; do
		hostname=$(echo $l | cut -d" " -f1)
		pid=$(echo $l | cut -d" " -f2)
		number=$(echo $l | cut -d" " -f3)

		stat=$(get_pid_status $hostname $pid)
		lastlog=$(get_log $number)

		echo -e "$number\t$hostname\t$pid\t$stat\t$lastlog"
	done 100< $idfile | sort
	
}

function send_kill {
	host=$1
	pid=$2
	signal=$3

	ssh $host "bash -c '[ -d /proc/$pid ] && kill $signal $pid && echo Killed $pid on $host with signal $signal'" || echo "could not kill $pid on $host"
}

function worker_kill {
	signal=$2

	[[ $signal == "" ]] && signal="-SIGKILL"

	( while read -u 100 l; do

		hostname=$(echo $l | cut -d" " -f1)
		pid=$(echo $l | cut -d" " -f2)
		number=$(echo $l | cut -d" " -f3)
		
		stat=$(get_pid_status $hostname $pid)
		
		send_kill $hostname $pid $signal

	done ) 100< $idfile

}

function worker_remote_barrier_enter {
	barrier_number=$2
	host_id=$3
	host_count=$4

	barrier_file=$barrier_base.$barrier_number

	(
		flock 200
		echo $host_id >> $barrier_file	

		now_waiting=$(wc -l $barrier_file)

	) 200>$barrier_file

	if [[ $now_waiting -ge $host_count ]]; then
		

		# we've passed the barrier - remove it from the command file

		(
			flock 100

			# get first non-comment line (this can be a barrier, too)
			task=$(sed -nre '/^[^#]|(#%B)/{p;q}' $queuefile)

			# comment out first non-comment line if it is a barrier line
			[[ ${task:0:3} == "#%B" ]] && sed -i -re '0,/(^[^#])|(^#%B)/s//#&/' $queuefile

			echo $task
		) 100>$lockfile
		
		# send "pass" to the requesting worker
		echo "pass-first";



	else 
		echo "wait";
	fi
}

function worker_remote_barrier_waiting {
	
	now_waiting=$(wc -l $barrier_file)
	if [[ $now_waiting -ge $host_count ]]; then
		echo "pass";
	else 
		echo "wait";
	fi
}

# first argument tells us what we should do
do_what=$1
if [[ $do_what == "run" ]]; then
	worker_run $0 $@
elif [[ $do_what == "status" ]]; then
	worker_status $@
elif [[ $do_what == "kill" ]]; then
	worker_kill $@

elif [[ $do_what == "remote_getwork" ]]; then
	worker_remote_getwork $@
elif [[ $do_what == "remote_barrier_enter" ]]; then
	worker_remote_barrier_enter $@
elif [[ $do_what == "remote_barrier_waiting" ]]; then
	worker_remote_barrier_waiting $@

else 
	echo UNKNOWN COMMAND: $do_what >&2
fi


# vim:filetype=sh foldmethod=manual
