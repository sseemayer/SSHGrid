#!/usr/bin/perl

=pod

=head1 NAME

sshgrid-kill - Send signals to sshgrid-worker processes

=head1 SYNOPSIS

	$ sshgrid-status -h hosts-file -s "2011-01-01-12-00-00" -S "SIGKILL"

Options:

	-h	--hosts-file		Filename pointing to list of hostnames to use for processing.
	-s	--subdirectory		Name of the subdirectory in the base directory for which to query status
	-S	--Signal		Name of the signal to send. Default: SIGKILL

	-b	--base-directory	Base directory on hosts for SSHGrid management. Default: ~/.sshgrid
	-w	--worker-file		Filename for the worker script running on the cluster nodes. Default: sshgrid-worker

	-?	--help			Display short help message
		--man			Display manpage


=head1 DESCRIPTION

sshgrid-kill will SSH into the first host in the provied hosts file, get the list of worker processes from the provided subdirectory and will use the hostname and pid information 
to send a signal to all worker processes.

=head1 EXAMPLES

Check the share/SSHGrid/examples/ directory that came in your SSHGrid distribution for sample command files and other goodies.

=head1 BUGS

Highly likely, and SSHGrid is still feature-incomplete, so check the SSHGrid issue tracker to report problems:

https://github.com/sseemayer/SSHGrid/issues

=head1 AUTHOR

Stefan Seemayer <seemayer@in.tum.de>

=cut

use strict;
use warnings;
use diagnostics;

use Getopt::Long qw(:config no_ignore_case );
use Pod::Usage;
use File::Basename;

use SSHGrid;

my ($help, $man, $hosts_file, $subdirectory, $host_count);
my $worker_file = "sshgrid-worker";
my $base_directory = "~/.sshgrid";
my $signal = "SIGTERM";

my %valid_signals = ( 
	SIGHUP => 1,
	SIGINT => 2,
	SIGQUIT	=> 3,
	SIGILL 	=> 4, 	
	SIGABRT	=> 6,	
	SIGFPE 	=> 8,	
	SIGKILL	=> 9, 	
	SIGSEGV	=> 11, 	
	SIGPIPE	=> 13, 	
	SIGALRM	=> 14, 	
	SIGTERM	=> 15, 	
	SIGSTOP => 17,
);

GetOptions(	
		"h|hosts-file=s"	=> \$hosts_file,
		"s|subdirectory=s"	=> \$subdirectory,
		"S|Signal=s"		=> \$signal,

		"b|base-directory=s"	=> \$base_directory,
		"w|worker-file=s"	=> \$worker_file,

		"help|?"		=> \$help,
		"man"			=> \$man,
) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

unless($hosts_file) {
	print STDERR "Must provide a hosts file!\n\n";
	pod2usage(2);
}

unless($subdirectory) {
	print STDERR "Must provide a subdirectory!\n\n";
	pod2usage(2);
}

unless(defined $valid_signals{$signal}) {
	print STDERR "Not a valid signal: $signal\nPossible choices:\n" . join(", ", sort keys %valid_signals) . "\n\n";
	exit(1);
}

my $sshg = SSHGrid->new(
	HostsSource => {FileSource => $hosts_file},
	RemoteRoot => $base_directory,
);


# launch worker scripts on all hosts
my $worker_name = (fileparse($worker_file))[0];
my $lock_name = "sshgrid.lock";
my $id_name = "sshgrid.host_ids";
my $workdir = "$base_directory/$subdirectory";
my $hosts = $sshg->hosts;
my $status = $sshg->remote_open($hosts->[0], "( cd $workdir; chmod +x $worker_name; ./$worker_name kill $id_name -$signal 2>&1)");

print $status;
